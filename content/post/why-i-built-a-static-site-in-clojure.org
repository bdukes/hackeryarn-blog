#+title: why-i-built-a-static-site-in-clojure
#+date: 2017-07-15
#+draft: false
#+categories: [Clojure]
#+tags: [opinion, experience]

* Why I Built a Static Site in Clojure
At a summer barbecue, a friend asked if I could build a website for his new
restaurant. Little did he know, I haven't built a static site in nearly a
decade. But I couldn't let him spend thousands of dollars on a cookie cutter
website designed by a firm that knew nothing about the hard work that went into
opening his restaurant.

We started coming up with the ideas right away, over a couple beers.
He wanted manageable content, an Instagram feed, and an easy to change restaurant
menu. It quickly started sounding like a full on Content Management System and
not a simple website. I had to real in this ambitious projects before it
became a feature sink. So we decided to hold off on these features and deliver
a beautiful static site.

With the list of dream features in mind, I started on the website using
~Wordpress~~. It could accommodate all the dream features, and I've used it in the
past. However, themes were complicated to build. Plugins, like the Instagram
feed, were ugly and hard to customize. And templates were clunky to use.
I couldn't continue with the ~Wordpress~ route. I was spoiled by component based
systems.

Next, I considered using ~Next.js~. Most of my day job is in React, so it's
familiar ground. But I couldn't justify the weight of React for a
website that didn't need dynamic content, and there is no option for built in
CMS.

That's when I decided to reach for ~hiccup~, a Clojure library for generating
server side content. ~hiccup~ let me use Clojure data structures to build my pages.

#+BEGIN_SRC clojure
;; generating a span element with the class `foo` and content of `bar`
(html [:span.foo  "bar"])
#+END_SRC

This short syntax let me express more with less code. I also had components.

#+BEGIN_SRC clojure
;; defining an `h1` variable with the content `Welcome`
(def header [:h1 "Welcome"])

;; using `header` variable inside a `div` with an additional paragraph
(html [:div.content
       header
       [:p "more content"]])
#+END_SRC

I could define functions or plain variables. Then use them as components in my
templates.

On top of that, I didn't have to learn a special syntax for working with data. I
had the full power of Clojure to interact with data and components themselves.

#+BEGIN_SRC clojure
;; defining data for the menu
(def menu-items
  ["Crab Rangoon"
   "Pot Stickers"
   "Miso Soup"])

;; creating a function to generate a list elment from the provided `menu-item`
(defn create-menu-item [menu-item]
  [:li.menu-item menu-item])

;; generating an unordered list by mapping over the `menu-items` data
(def menu
  [:ul
   (map create-menu-item menu-items)])
#+END_SRC

I could do all this with a concise syntax that is simpler than Wordpress
templates and shorter that React components.

The final benefit is the ease of mind provided by Clojure. I know that no
matter what features we dream up, it will be possible with this general purpose language.
